"Actual" = testing.data[,predict.column],
"Predicted" = predict.NN,
"RMSE" = RMSE.NN))
} # End of NNopt function
training.index <- sample(seq_len(nrow(all.data)), size=(percent.train*nrow(all.data)))
training.index <- sample(seq_len(nrow(all.data)), size=(0.8*nrow(all.data)))
no.cols <- c("PAA...1.2.Basin.Sampling","Initial.PAA.Demand.or.Decay", "DPAA.Samples")
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.min..Sample", training.index = training.index)
training.index <- sample(seq_len(nrow(all.data)), size=(0.8*nrow(all.data)))
no.cols <- c("PAA...1.2.Basin.Sampling","Initial.PAA.Demand.or.Decay", "DPAA.Samples")
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.min..Sample", training.index = training.index)
# Predict C1
training.index <- sample(seq_len(nrow(all.data)), size=(0.8*nrow(all.data)))
no.cols <- c("PAA...1.2.Basin.Sampling","Initial.PAA.Demand.or.Decay", "DPAA.Samples")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.min..Sample", training.index = training.index)
C1_predict <- NN.obj[[3]] # Prediction
no.cols <- c("PAA...1.min..Sample" ,"Initial.PAA.Demand.or.Decay", "DPAA.Samples")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.2.Basin.Sampling", training.index = training.index)
C2_predict <- NN.obj[[3]] # Prediction
k_predict <- -(1/t[training.index])*log(C2_predict/(C1_predict))
k_predict <- -(1/t[-training.index])*log(C2_predict/(C1_predict))
plot(k);points(k_predict)
Ct_predict <- C1_predict/k_predict*exp(t[-training.index])
plot(Ct_actual)
points(Ct_predict, col="blue")
plot(Ct_actual); points(Ct_predict, col="blue")
plot(Ct_actual); points(Ct_predict, col="blue")
View(Ct_predict)
Ct_predict <- C1_predict/k_predict*exp(-k_predict*t[-training.index])
plot(Ct_actual); points(Ct_predict, col="blue")
plot(Ct_actual); points(Ct_predict, col="blue")
plot(Ct_actual, ylim=c(0,100)); points(Ct_predict, col="blue")
plot(Ct_actual, ylim=c(0,100)); points(Ct_predict, col="blue")
plot(data.frame(Ct_actual), ylim=c(0,100)); points(data.frame(Ct_predict), col="blue")
plot(data.frame(Ct_actual), ylim=c(0,100)); points(data.frame(Ct_predict), col="blue")
plotTwo <- function(data1,data2) {
# data1 <- log(n.paa.grab[,6])
# data2 <- nsec.online[,which(colnames(nsec.online) == "NSEC Effluent NO5")]
label1 <- colnames(data1)
label2 <- colnames(data2)
if (range(index(data1)[which(!is.na(data1))])[1] < range(index(data2)[which(!is.na(data2))])[1]) {
r1 <- range(index(data2)[which(!is.na(data2))])[1]
} else {
r1 <- range(index(data1)[which(!is.na(data1))])[1]
}
if (range(index(data1)[which(!is.na(data1))])[2] > range(index(data2)[which(!is.na(data2))])[2]) {
r2 <- range(index(data2)[which(!is.na(data2))])[2]
} else {
r2 <- range(index(data1)[which(!is.na(data1))])[2]
}
data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
data2plot <- merge(data2plot, data2[paste0(r1,"/",r2)])
data2plot <- data2plot[-which(duplicated(index(data2plot))),]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(5.1,4.1,2.1,4.1))
plot(x = data2plot[,3], y = data2plot[,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
par(new = TRUE)
plot(x = data2plot[,3], y = data2plot[,2], type = "p", pch = 20, col = "red", xaxt = "n", xlab = "", yaxt="n", ylab = "")
axis(side = 4, col.axis = "red")
mtext(side = 4, label2, line = 2.5, col = "red")
# x-axis
axis.ticks <- seq(0,round(data2plot[nrow(data2plot),3]), by = 10)
axis.labels <- sapply(axis.ticks, function(x) which(x > data2plot[,3]))
axis.labels <- sapply(axis.labels, function(x) x[length(x)])
axis.labels[[1]] <- 1
axis.labels <- as.numeric(unlist(axis.labels))
axis(side = 1, at = axis.ticks, labels = format(as.POSIXct(rownames(data2plot)[axis.labels]), "%m/%d"))
}
plotTwo(Ct_predict, Ct_actual)
plotTwo <- function(data1,data2) {
# data1 <- log(n.paa.grab[,6])
# data2 <- nsec.online[,which(colnames(nsec.online) == "NSEC Effluent NO5")]
label1 <- colnames(data1)
label2 <- colnames(data2)
#
# if (range(index(data1)[which(!is.na(data1))])[1] < range(index(data2)[which(!is.na(data2))])[1]) {
#   r1 <- range(index(data2)[which(!is.na(data2))])[1]
# } else {
#   r1 <- range(index(data1)[which(!is.na(data1))])[1]
# }
# if (range(index(data1)[which(!is.na(data1))])[2] > range(index(data2)[which(!is.na(data2))])[2]) {
#   r2 <- range(index(data2)[which(!is.na(data2))])[2]
# } else {
#   r2 <- range(index(data1)[which(!is.na(data1))])[2]
# }
#
# data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
# data2plot <- merge(data2plot, data2[paste0(r1,"/",r2)])
data2plot <- merge(data1, data2)
data2plot <- data2plot[-which(duplicated(index(data2plot))),]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(5.1,4.1,2.1,4.1))
plot(x = data2plot[,3], y = data2plot[,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
par(new = TRUE)
plot(x = data2plot[,3], y = data2plot[,2], type = "p", pch = 20, col = "red", xaxt = "n", xlab = "", yaxt="n", ylab = "")
axis(side = 4, col.axis = "red")
mtext(side = 4, label2, line = 2.5, col = "red")
# x-axis
axis.ticks <- seq(0,round(data2plot[nrow(data2plot),3]), by = 10)
axis.labels <- sapply(axis.ticks, function(x) which(x > data2plot[,3]))
axis.labels <- sapply(axis.labels, function(x) x[length(x)])
axis.labels[[1]] <- 1
axis.labels <- as.numeric(unlist(axis.labels))
axis(side = 1, at = axis.ticks, labels = format(as.POSIXct(rownames(data2plot)[axis.labels]), "%m/%d"))
}
plotTwo(Ct_predict, Ct_actual)
data1 <- Ct_predict
data2 <- Ct_actual
label1 <- colnames(data1)
label2 <- colnames(data2)
#   r1 <- range(index(data1)[which(!is.na(data1))])[1]
# }
# if (range(index(data1)[which(!is.na(data1))])[2] > range(index(data2)[which(!is.na(data2))])[2]) {
#   r2 <- range(index(data2)[which(!is.na(data2))])[2]
# } else {
#   r2 <- range(index(data1)[which(!is.na(data1))])[2]
# }
#
# data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
# data2plot <- merge(data2plot, data2[paste0(r1,"/",r2)])
data2plot <- merge(data1, data2)
data2plot <- data2plot[-which(duplicated(index(data2plot))),]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(5.1,4.1,2.1,4.1))
plot(x = data2plot[,3], y = data2plot[,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
View(data2plot)
#   r1 <- range(index(data1)[which(!is.na(data1))])[1]
# }
# if (range(index(data1)[which(!is.na(data1))])[2] > range(index(data2)[which(!is.na(data2))])[2]) {
#   r2 <- range(index(data2)[which(!is.na(data2))])[2]
# } else {
#   r2 <- range(index(data1)[which(!is.na(data1))])[2]
# }
#
# data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
# data2plot <- merge(data2plot, data2[paste0(r1,"/",r2)])
data2plot <- merge(data1, data2)
# data2plot <- data2plot[-which(duplicated(index(data2plot))),]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(5.1,4.1,2.1,4.1))
x1 <- which(!is.na(data2plot[,1]))
x2 <- which(!is.na(data2plot[,2]))
plot(x = data2plot[x1,3], y = data2plot[x1,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
par(mar=c(5.1,4.1,2.1,4.1))
x1 <- which(!is.na(data2plot[,1]))
x2 <- which(!is.na(data2plot[,2]))
plot(x = data2plot[x1,3], y = data2plot[x1,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
par(new = TRUE)
plot(x = data2plot[x2,3], y = data2plot[x2,2], type = "p", pch = 20, col = "red", xaxt = "n", xlab = "", yaxt="n", ylab = "")
axis(side = 4, col.axis = "red")
mtext(side = 4, label2, line = 2.5, col = "red")
# x-axis
axis.ticks <- seq(0,round(data2plot[nrow(data2plot),3]), by = 10)
axis.labels <- sapply(axis.ticks, function(x) which(x > data2plot[,3]))
axis.labels <- sapply(axis.labels, function(x) x[length(x)])
plotTwo <- function(data1,data2) {
# data1 <- log(n.paa.grab[,6])
# data2 <- nsec.online[,which(colnames(nsec.online) == "NSEC Effluent NO5")]
label1 <- colnames(data1)
label2 <- colnames(data2)
#
# if (range(index(data1)[which(!is.na(data1))])[1] < range(index(data2)[which(!is.na(data2))])[1]) {
#   r1 <- range(index(data2)[which(!is.na(data2))])[1]
# } else {
#   r1 <- range(index(data1)[which(!is.na(data1))])[1]
# }
# if (range(index(data1)[which(!is.na(data1))])[2] > range(index(data2)[which(!is.na(data2))])[2]) {
#   r2 <- range(index(data2)[which(!is.na(data2))])[2]
# } else {
#   r2 <- range(index(data1)[which(!is.na(data1))])[2]
# }
#
# data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
# data2plot <- merge(data2plot, data2[paste0(r1,"/",r2)])
data2plot <- merge(data1, data2)
# data2plot <- data2plot[-which(duplicated(index(data2plot))),]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(5.1,4.1,2.1,4.1))
x1 <- which(!is.na(data2plot[,1]))
x2 <- which(!is.na(data2plot[,2]))
plot(x = data2plot[x1,3], y = data2plot[x1,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
par(new = TRUE)
plot(x = data2plot[x2,3], y = data2plot[x2,2], type = "p", pch = 20, col = "red", xaxt = "n", xlab = "", yaxt="n", ylab = "")
axis(side = 4, col.axis = "red")
mtext(side = 4, label2, line = 2.5, col = "red")
# x-axis
axis.ticks <- seq(0,round(data2plot[nrow(data2plot),3]), by = 10)
axis.labels <- sapply(axis.ticks, function(x) which(x > data2plot[,3]))
axis.labels <- sapply(axis.labels, function(x) x[length(x)])
axis.labels[[1]] <- 1
axis.labels <- as.numeric(unlist(axis.labels))
axis(side = 1, at = axis.ticks, labels = format(as.POSIXct(rownames(data2plot)[axis.labels]), "%m/%d"))
}
plotTwo(Ct_predict, Ct_actual)
colnames(oct.paa)
plotTimeseries <- function(data1) {
label1 <- colnames(data1)
r1 <- range(index(data1)[which(!is.na(data1))])[1]
r2 <- range(index(data1)[which(!is.na(data1))])[2]
data2plot <- na.omit(data1)[paste0(r1,"/",r2)]
data2plot <- data.frame(data2plot, row.names = as.character(index(data2plot)))
data2plot <- cbind(data2plot, as.numeric(difftime(as.POSIXct(rownames(data2plot)), as.POSIXct(rownames(data2plot)[1]),units = "days")))
par(mar=c(3.1,4.1,2.1,2.1))
plot(x = data2plot[,ncol(data2plot)], y = data2plot[,1], type = "p", pch = 20, col = "black", xaxt = "n", xlab = "", ylab = "", yaxt="n")
axis(side = 2)
mtext(side = 2, label1, line = 2.5)
# x-axis
axis.ticks <- seq(0,round(data2plot[nrow(data2plot),ncol(data2plot)]), by = 10)
axis.labels <- sapply(axis.ticks, function(x) which(x > data2plot[,ncol(data2plot)]))
axis.labels <- sapply(axis.labels, function(x) x[length(x)])
axis.labels[[1]] <- 1
axis.labels <- as.numeric(unlist(axis.labels))
axis(side = 1, at = axis.ticks, labels = format(as.POSIXct(rownames(data2plot)[axis.labels]), "%m/%d"))
}
plotTimeseries(Ct_predict)
colnames(all.data[,-no.cols])
# Predict C1
training.index <- sample(seq_len(nrow(all.data)), size=(0.8*nrow(all.data)))
no.cols <- c("PAA...1.2.Basin.Sampling","Initial.PAA.Demand.or.Decay", "DPAA.Samples",  "Time.to.1.min..Sample", "Sample.Time..1_min.")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.min..Sample", training.index = training.index)
C1_predict <- NN.obj[[3]] # Prediction
no.cols <- c("PAA...1.min..Sample" ,"Initial.PAA.Demand.or.Decay", "DPAA.Samples",  "Time.to.1.min..Sample", "Sample.Time..1_min.")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "PAA...1.2.Basin.Sampling", training.index = training.index)
C2_predict <- NN.obj[[3]] # Prediction
k_predict <- -(1/t[-training.index])*log(C2_predict/(C1_predict))
plot(k);points(k_predict)
Ct_predict <- C1_predict/k_predict*exp(-k_predict*t[-training.index])
plotTimeseries(Ct_predict)
library(piwebapi)
useKerberos <- FALSE
username <- "knewhart"
password <- "Lunabear2@"
validateSSL <- TRUE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
response1 = piWebApiService$home$get()
validateSSL <- FALSE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
response1 = piWebApiService$home$get()
plotTimeseries(k_predict)
mean(k_)predict
meanpredict)
mean(k_predict)
k_avg
C_actual <- Ct_actual/t
View(cbind(C_actual, C2))
plotTwo(C1,C2)
C1 <- all.data[,"PAA...1.min..Sample"]
plotTwo(C1,C2)
plot(C1)
plot(C2)
C2_calc <- C1*exp(-k_avg*t)
plot(C2)
points(C2_calc)
plot(C2_calc-C2)
plot(data.frame(C2_calc-C2))
plotTimeseries(C2_calc-C2)
plotTimeseries(C2_calc-C2)
abline(0,0)
plotTimeseries(C2_calc-C2)
abline(0,0)
data2plot <- (C2_calc-C2)
View(data2plot)
colnames(data2plot) <- "Calculated C2 - Actual C2"
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(C2_calc-C2)
abline(0,0)
mtext("Assuming constant decay rate", side = 3)
plotTimeseries(data2plot)
abline(0,0)
mtext("Assuming constant decay rate", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction", side = 3)
par(mfrow=c(2,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction", side = 3)
par(mfrow=c(1,2))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction", side = 3)
par(mfrow=c(2,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction", side = 3)
no.cols <- c("PAA...1.2.Basin.Sampling","PAA...1.min..Sample", "DPAA.Samples",  "Time.to.1.min..Sample", "Sample.Time..1_min.")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "Initial.PAA.Demand.or.Decay", training.index = training.index)
D_predict <- NN.obj[[3]] # Prediction
D_predict
no.cols <- c("PAA...1.2.Basin.Sampling","PAA...1.min..Sample", "DPAA.Samples",  "Time.to.1.min..Sample", "Sample.Time..1_min.")
no.cols <- sapply(no.cols, function(x) which(colnames(all.data) == x))
NN.obj <- NNopt(all.data = all.data[,-no.cols], predict.col.name = "Initial.PAA.Demand.or.Decay", training.index = training.index)
D_predict <- NN.obj[[3]] # Prediction
par(mfrow=c(3,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Decay assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network decay prediction", side = 3)
data2plot <- (D_predict-NN.obj[[2]])
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
D <- NN.obj[[2]]
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
D <- all.data[-training.index,"Initial.PAA.Demand.or.Decay"]
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
par(mfrow=c(3,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Decay assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network decay prediction", side = 3)
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network demand prediction", side = 3)
par(mfrow=c(2,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Decay assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network decay prediction", side = 3)
dev.off()
par(mfrow=c(1,1))
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network demand prediction", side = 3)
par(mfrow=c(2,1))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network demand prediction", side = 3)
par(mfrow=c(2,1))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction error", side = 3)
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
points((D_predict-D+D))
points((D_predict))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
points((D_predict))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
points((D_predict), col="blue", pch = 20)
lines((D_predict), col="blue", pch = 20, type='c')
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
lines((D_predict), col="blue", pch = 20, type='c')
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Actual demand", side = 3)
lines((D_predict), col="blue", type='c')
par(mfrow=c(2,1))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "D (mg/L)"
plotTimeseries(data2plot)
# abline(0,0)
mtext("Demand", side = 3)
points((D_predict), col="blue", pch=20)
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction error", side = 3)
library(readxl)
library(xts)
# Import E.coli
ecoli <- readxl::read_excel("data/PAA-Ecoli.xlsx",
sheet = "Sheet2")
getwd()
getwd()
setwd("C:/Users/KNewhart/Documents/GitHub/MWRD")
setwd("C:/Users/KNewhart/Documents/GitHub/MWRD")
# Import E.coli
ecoli <- readxl::read_excel("data/PAA-Ecoli.xlsx",
sheet = "Sheet2")
ecoli <- list(xts(na.omit(ecoli[,2][[1]]), order.by = na.omit(ecoli[,1][[1]])),
xts(na.omit(ecoli[,4][[1]]), order.by = na.omit(ecoli[,3][[1]])))
ecoli <- mergeData(ecoli)
colnames(ecoli) <- c("Pre-dis E.coli", "Post-dis E.coli")
png("C2.png")
par(mfrow=c(2,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
mtext("Decay assuming constant, 1st order kinetics", side = 3)
colnames(data2plot) <- "Predicted C2 - Actual C2"
dev.off()
png("C2.png")
par(mfrow=c(2,1))
data2plot <- (C2_calc-C2)
colnames(data2plot) <- "Calculated C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Decay assuming constant, 1st order kinetics", side = 3)
data2plot <- (C2_predict-C2[-training.index])
colnames(data2plot) <- "Predicted C2 - Actual C2"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network decay prediction", side = 3)
dev.off()
png("D.png")
par(mfrow=c(2,1))
data2plot <- (all.data[,"Initial.PAA.Demand.or.Decay"])
colnames(data2plot) <- "D (mg/L)"
plotTimeseries(data2plot)
# abline(0,0)
mtext("Demand", side = 3)
points((D_predict), col="blue", pch=20)
data2plot <- (D_predict-D)
colnames(data2plot) <- "Predicted D - Actual D"
plotTimeseries(data2plot)
abline(0,0)
mtext("Neural network prediction error", side = 3)
dev.off()
