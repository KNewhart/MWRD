if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags <- na.omit(pi.tags)
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-04", "T00:00:00Z")
end <- paste0("2019-02-04", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
new.objects <- list()
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
dev.off()
tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
dev.off()
pca.data <- scale(as.data.frame(na.omit(all.data)))
pca.results <- princomp(pca.data) # Spectral decomposition
library(readxl)
library(xts)
library(readr)
library(doSNOW)
library(parallel)
library(neuralnet)
library(factoextra)
# Fix timestamps - this function creates an xts object from the piWebApiService function above
fix.timestamps <- function(pi.data) {
ch.times <- pi.data[,2]
ch.times <- sub("T", " ", ch.times)
ch.times <- sub("Z", " ", ch.times)
times <- as.POSIXct(ch.times)
return(xts::xts(pi.data[,1], order.by = times))
}
# Install and load piwebapi package from Github
# install.packages("devtools")
# library(devtools)
# install_github("rbechalany/PI-Web-API-Client-R")
library(piwebapi)
# Login information
useKerberos <- TRUE
username <- "knewhart"
password <- "Lunabear2@"
validateSSL <- TRUE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
pi.tags <- read_excel("pi-tags.xls")
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-04", "T00:00:00Z")
end <- paste0("2019-02-04", "T00:00:00Z")
# Load data
new.objects <- list()
i = 1
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-04", "T00:00:00Z")
end <- paste0("2019-02-04", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
View(all.data)
tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
dev.off()
tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
dev.off()
View(all.data)
View(all.data)
i = 1
density(as.vector(na.omit(all.data[,i]))
)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
round(sqrt(ncol(all.data)))
round(ncol(all.data)/round(sqrt(ncol(all.data)))))
round(ncol(all.data)/round(sqrt(ncol(all.data))))
8*8
tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
dev.off()
tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
dev.off()
getwd()
tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
dev.off()
tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
dev.off()
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
pca.data <- scale(as.data.frame(na.omit(all.data)))
pca.results <- princomp(pca.data) # Spectral decomposition
View(na.omit(all.data))
AB2 <- grep("AB2", colnames(all.data))
pca.data <- scale(as.data.frame(na.omit(all.data[,AB2])))
pca.results <- princomp(pca.data) # Spectral decomposition
View(as.data.frame(na.omit(all.data[,AB2])))
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2018-01-01", "T00:00:00Z")
end <- paste0("2019-01-01", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data)
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2018-01-01", "T00:00:00Z")
end <- paste0("2018-03-15", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data)
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-01", "T00:00:00Z")
end <- paste0("2019-03-15", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data)
plot(all.data[,1:5])
plot(all.data[,6:10])
plot(all.data[,6:10]); legend(colnames(all.data[,6:10]))
plot(all.data[,6:10]); legend(legend=colnames(all.data[,6:10]))
plot(all.data[,6:10]); legend(legend=colnames(all.data[,6:10]),x=0, y=0)
plot(all.data[,6:10]); legend(legend=colnames(all.data[,6:10]),x=0)
plot(all.data[,6:10]); legend(legend=colnames(all.data[,6:10]),x=index(all.data[1,1]))
colnames(all.data[,6:10])
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-01", "T00:00:00Z")
end <- paste0("2019-03-30", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data[,6:10])
plot(all.data[,6:10])
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-01-01", "T00:00:00Z")
end <- paste0("2019-04-15", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data[,6:10])
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-02-11", "T00:00:00Z")
end <- paste0("2019-04-30", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data[,6:10])
pi.tags <- read_excel("pi-tags.xls")
pi.tags <- na.omit(pi.tags)
# Fix tags
for(i in 1:nrow(pi.tags)) {
if(is.na(pi.tags[i,2])) next
if(substr(pi.tags[i,2],1,12) == "\\\\APPLEPI_AF") pi.tags[i,2] <- paste0("af:", pi.tags[i,2])
if(substr(pi.tags[i,2],1,9) == "\\\\applepi") pi.tags[i,2] <- paste0("pi:", pi.tags[i,2])
}
pi.tags.2.remove <- c("South Primary Influent Flow", "South Secondary Influent Flow")
pi.tags.2.remove <- sapply(pi.tags.2.remove, function(x) which(x == pi.tags[,1]))
pi.tags <- pi.tags[-pi.tags.2.remove,]
start <- paste0("2019-02-11", "T00:00:00Z")
end <- paste0("2019-04-15", "T00:00:00Z")
# end <- paste0(as.character(as.Date(Sys.time()) - 1), "T00:00:00Z")
# Load data
for(i in 1:nrow(pi.tags)) {
# assign(make.names(pi.tags[i,1]), piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2])
# assign(make.names(pi.tags[i,1]), fix.timestamps(get(make.names(pi.tags[i,1]))))
# new.objects <- c(new.objects, list(make.names(pi.tags[i,1])))
data.holder <- piWebApiService$data$getInterpolatedValues(path=unlist(pi.tags[i,2]), startTime = start, endTime = end, interval = "1d")[,1:2]
data.holder <- fix.timestamps(data.holder)
colnames(data.holder) <- make.names(pi.tags[i,1])
if (i ==1 ) {
all.data <- data.holder
} else {
all.data <- merge(all.data, data.holder)
}
}
cols2keep <- which(!is.na(all.data[1,]))
all.data <- all.data[,cols2keep]
plot(all.data[,6:10])
plot(SCALE(all.data[,6:10]))
plot(scale(all.data[,6:10]))
tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
dev.off()
tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
dev.off()
# tiff(filename="MWRD_AB2_v1_density.tiff", units = "in", width = 20, height = 20, res = 200)
# par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
# mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
plot(density(as.vector(na.omit(all.data[,i]))),
main = colnames(all.data)[i],
xlab="", ylab="")
}
# dev.off()
# tiff(filename="MWRD_AB2_v1_probability.tiff", units = "in", width = 20, height = 20, res = 200)
# par(mfrow=c(round(sqrt(ncol(all.data))), round(ncol(all.data)/round(sqrt(ncol(all.data))))),
# mar=c(3,3,3,1)+.01)
for(i in 1:ncol(all.data)) {
qqnorm(as.vector(na.omit(all.data[,i])), main = colnames(all.data)[i])
qqline(as.vector(na.omit(all.data[,i])))
}
# dev.off()
pca.data <- scale(as.data.frame(na.omit(all.data)))
pca.results <- princomp(pca.data) # Spectral decomposition
AB2 <- grep("AB2", colnames(all.data))
pca.data <- scale(as.data.frame(na.omit(all.data[,AB2])))
pca.results <- princomp(pca.data) # Spectral decomposition
View(pca.data)
as.data.frame(na.omit(all.data[,AB2]))
mean(as.data.frame(na.omit(all.data[,AB2])))
apply(as.data.frame(na.omit(all.data[,AB2])), 2, mean)
AB2 <- grep("AB2", colnames(all.data))
pca.data <- as.data.frame(na.omit(all.data[,AB2]))
pca.data <- pca.data[,-which(apply(pca.data,2,mean) == 0)]
pca.data <- scale(pca.data)
pca.results <- princomp(pca.data) # Spectral decomposition
tiff(filename="MWRD_AB2_v1_PCA_AB2.tiff", units = "in", width = 11, height = 6.5, res = 200)
fviz_pca_var(pca.results, labelsize = 3,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
ggtheme=theme(axis.text=element_text(size=8),
axis.title=element_text(size=8),
plot.title=element_text(size=8),
legend.title=element_text(size=8),
legend.text=element_text(size=8)
))
dev.off()
fviz_pca_var(pca.results)
fviz_pca_biplot(pca.results)
rownames(pca.data) <- seq(1:nrow(pca.data))
pca.results <- princomp(pca.data) # Spectral decomposition
fviz_pca_biplot(pca.results)
colnames(pca.data)
