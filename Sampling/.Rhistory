data <- data.to.save
exp.mod.vals <- matrix(data=NA, nrow=nrow(data), ncol=2)
mod.results <- matrix(data=NA, nrow=length(unique(data[,"Sampling event"])), ncol=4)
# Fit curve
for(i in unique(data[,"Sampling event"])) {
s <- which(data[,"Sampling event"] %in% i)
yy <- log(as.numeric(as.vector(data[s,"PAA (mg/L)"])))
xx <- as.numeric(as.vector(data[s,"HRT (min)"]))
if(any(is.infinite(yy))) {
xx <- xx[!is.infinite(yy)]
yy <- yy[!is.infinite(yy)]
}
mod <- lm(yy~xx)
yy.predict <- predict(mod)
k <- as.numeric(coef(mod)[2]*-1)
C0 <- exp(as.numeric(coef(mod)[1]))
D <- as.numeric(as.vector(data[s,"PAA Setpoint (mg/L)"])) - C0
exp.mod.vals[s,1] <- D
exp.mod.vals[s,2] <- k
mod.results[i,1] <- D[1]
mod.results[i,2] <- k[1]
mod.results[i,3] <- as.POSIXct(data[s,"Datetime"])[1]
mod.results[i,4] <- C0/k-C0/k*exp(-k*last(xx)) # CT
}
CT <- mod.results[,4]
log.removal
CT
length(CT)
length(log.removal)
plot(CT, log.removal)
D
k
mod.results
as.POSIXct(mod.results[,3])
as.POSIXct(mod.results[,3], origin="1970-01-01")
k
D
range(mod.results[,2])
range(mod.results[,1])
View(data.to.save)
install.packages("plotly")
library(plotly)
chemscan <- data.to.save[sapply(unique(data.to.save[,6]), function(x) data.to.save[first(which(data.to.save[,6]==x)),6])]
chemscan <- sapply(unique(data.to.save[,6]), function(x) data.to.save[first(which(data.to.save[,6]==x)),6])
chemscan
data.to.plot <- matrix(CT, log.removal, chemscan)
data.to.plot <- matrix(data=c(CT, log.removal, chemscan))
data.to.plot
data.to.plot <- matrix(data=c(CT, log.removal, chemscan), ncol=3)
?matrix
c(CT, log.removal, chemscan)
CT
log.removal
chemscan
str(chemscan)
unlist(chemscan)
as.numeric(chemscan)
chemscan <- as.numeric(sapply(unique(data.to.save[,6]), function(x) data.to.save[first(which(data.to.save[,6]==x)),6]))
unique(data.to.save[,6])
chemscan <- as.numeric(sapply(unique(data.to.save[,8]), function(x) data.to.save[first(which(data.to.save[,8]==x)),6]))
data.to.plot <- matrix(data=c(CT, log.removal, chemscan), ncol=3)
data.to.plot
names(data.to.plot)
colnames(data.to.plot)
colnames(data.to.plot) <- c("CT", "log removal", "Chemscan")
colnames(data.to.plot)
install.package("lattice")
library(lattice)
levelplot("log removal" ~ "CT"*"Chemscan", data=data.to.plot)
colnames(data.to.plot) <- c("CT", "log.removal", "Chemscan")
levelplot("log removal" ~ "CT"*"Chemscan", data=data.to.plot)
levelplot(log.removal ~ CT*Chemscan, data=data.to.plot)
?expand.grid
?levelplot
data.to.plot
str(data.to.plot)
levelplot(data.to.plot)
dev.off()
levelplot(data.to.plot)
?par
par(mar=c(1,1,1,1))
levelplot(data.to.plot)
levelplot(t(data.to.plot))
?levelplot
names(data.to.plot)
names(data.to.plot) <- c("CT", "log.removal", "Chemscan")
as.formula("CT ~ log.removal * Chemscan")
lm(as.formula("CT ~ log.removal * Chemscan"))
names(data.to.plot) <- c("CT", "log.removal", "Chemscan")
names(data.to.plot) <- c("CT", "log.removal", "chemscan")
lm(as.formula("CT ~ log.removal * Chemscan"), data=data.to.plot)
names(data.to.plot)
colnames(data.to.plot) <- c("CT", "log.removal", "chemscan")
data.to.plot <- data.frame(data=c(CT, log.removal, chemscan), ncol=3)
colnames(data.to.plot) <- c("CT", "log.removal", "chemscan")
data.to.plot <- data.frame(c(CT, log.removal, chemscan), ncol=3)
data.to.plot
data.to.plot <- data.frame("CT"=CT, "log.removal"=log.removal, "Chemscan"=chemscan, ncol=3)
data.to.plot
data.to.plot <- data.frame("CT"=CT, "log.removal"=log.removal, "Chemscan"=chemscan)
data.to.plot
View(data.to.plot)
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(data.to.plot[1], data.to.plot[2], data.to.plot[3], highlight.3d = TRUE,  angle = 120,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 120,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 60,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
for(i in 1:359) {scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = i,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)}
}
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 60,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 80,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 30,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
data.to.analyze <- scale(data.to.plot)
data.pca <- princomp(data.to.analyze)
summary(data.pca)
plot(data.pca)
data.fa3 <- factanal(data.to.analyze, factors=3, rotation="varimax")
data.fa2 <- factanal(data.to.analyze, factors=2, rotation="varimax")
data.f1 <- factanal(data.to.analyze, factors=1, rotation="varimax")
data.f1
data.fa1
data.f1 <- factanal(data.to.analyze, factors=1, rotation="varimax")
data.fa1
data.f1
colnames(data.to.plot)
data.lm <- lm(log.removal~CT+Chemscan, data=data.to.plot)
data.lm
data.lm <- lm(log.removal~CT+Chemscan, data=data.to.analyze)
data.lm <- lm(log.removal~CT+Chemscan, data=data.frame(data.to.analyze))
data.lm
predict(data.frame(data.to.analyze), data.lm)
predict(data.frame(data.to.analyze)[,"log.removal"], data.lm)
summary(data.lm)
data.lm <- lm(log.removal~CT, data=data.frame(data.to.analyze))
summary(data.lm)
plot(log.removal ~ CT, data=data.to.plot)
dev.off()
plot(log.removal ~ CT, data=data.to.plot)
final.ecoli <- sapply(unique(data4[,"sample.count"]), function(x) {
data4[last(which(data4[,"sample.count"] == x)),3]
})
plot(final.ecoli ~ data.to.plot[,"CT"])
data4[,3]
PAA.PROFILE.DATA <- read.xlsx("data/PAA PROFILE DATA_08-08-19.xlsx", sheetIndex = 1)
# Subset PAA data
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA[which(PAA.PROFILE.DATA$ANALYSIS_CODE == "ECIDX"),]
# Remove erroneous data
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(PAA.PROFILE.DATA.ecoli$COMBINATION_RESULT != "Scratched"),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(PAA.PROFILE.DATA.ecoli$COMBINATION_RESULT != "PENDING"),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(!is.na(PAA.PROFILE.DATA.ecoli$NUMERIC_RESULT)),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[-which(substr(PAA.PROFILE.DATA.ecoli$LOCATION_DESCRIPTION,1,9) == "RWH South"),]
# Fix timestamps
date.time <- strptime(paste(as.character(PAA.PROFILE.DATA.ecoli$COLLECTION_DATE), as.character(PAA.PROFILE.DATA.ecoli$COLLECTION_TIME)), format="%Y-%m-%d %H:%M")
# Clean data objects
data <- data.frame(date.time, stringsAsFactors = FALSE)
data <- cbind(data, as.data.frame(PAA.PROFILE.DATA.ecoli$COMMON_NAME, stringsAsFactors = FALSE))
data <- cbind(data, as.data.frame(as.numeric(as.character(PAA.PROFILE.DATA.ecoli$NUMERIC_RESULT)),
stringsAsFactors = FALSE))
colnames(data) <- c("date.time", "COMMON_NAME", "NUMERIC_RESULT")
data <- data[order(data[,1]),]
# Load Flow and setpoint Data
{
# Install and load piwebapi package from Github
# install.packages("devtools")
# library(devtools)
# install_github("rbechalany/PI-Web-API-Client-R")
library(piwebapi)
# Login information
useKerberos <- TRUE
username <- "knewhart"
password <- "Lunabear2@"
validateSSL <- TRUE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
pi.times <- matrix(NA,nrow=length(date.time),ncol=1)
for(i in 1:length(date.time)) {
time.obj <- date.time[i]
time.obj$hour <- time.obj$hour + 6
pi.times[i,1] <- paste0(as.character(format(time.obj,"%Y-%m-%d")),"T",
as.character(format(time.obj,"%H:%M:%S")),"Z")
}
pi.tags <- matrix(c("DIS North Flow", "\\\\applepi\\PAA_North_Plant_Flow",
"PAA Setpoint", "\\\\applepi\\PAA_N_Target_Dose",
"DIS PAA N Upstream Residual", "\\\\applepi\\AI_K826"), ncol=2, byrow=TRUE)
for(tag in 1:nrow(pi.tags)) {
pi.points <- piWebApiService$point$getByPath(path=as.character(pi.tags[tag,2]))
data.holder <- piWebApiService$data$stream$getInterpolatedAtTimes(webId = pi.points$WebId,
time = c(pi.times[,1]))[[2]]
data.holder <- do.call("rbind", lapply(data.holder, function(x) c(x$Timestamp, x$Value)))
colnames(data.holder) <- c("Datetime", make.names(pi.tags[tag,1]))
if(tag==1) all.data <- data.holder
if(tag>1) {
all.data <- cbind(all.data, data.holder[,2])
colnames(all.data)[ncol(all.data)] <- make.names(pi.tags[tag,1])
}
}
}
# Merge PI data and PAA data
data2 <- cbind(data, as.data.frame(all.data[,2:ncol(all.data)], stringsAsFactors = FALSE))
# Calculate hrt
hrt <- matrix(data=NA, nrow=nrow(data2), ncol = 1)
hrt[grep("NPAA1M", data2$COMMON_NAME)] <- 122.2683*as.numeric(as.vector(data2[c(grep("NPAA1M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.9312)
hrt[grep("NPAA10M", data2$COMMON_NAME)] <- 1044.6*as.numeric(as.vector(data2[c(grep("NPAA10M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.956)
hrt[grep("NPAA20M", data2$COMMON_NAME)] <- 1909.8*as.numeric(as.vector(data2[c(grep("NPAA20M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.958)
hrt[grep("NPAA30M", data2$COMMON_NAME)] <- 2775*as.numeric(as.vector(data2[c(grep("NPAA30M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.959)
data3 <- cbind(data2, as.data.frame(hrt, stringsAsFactors = FALSE))
colnames(data3)[ncol(data3)] <- "HRT (min)"
# Label sampling campaigns
sample.count <- vector()
for(i in 2:nrow(data3)){
if(i == 2) {
last.row <- 1
sampling.campaign <- 1
}
if(difftime(data3[,"date.time"][i],data3[,"date.time"][i-1], units = "mins") > 60) {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
} else {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:(i-1)))))
last.row <- i
sampling.campaign <- sampling.campaign + 1
}
} else {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
}
}
}
data3 <- cbind(data3, as.data.frame(sample.count, stringsAsFactors = FALSE))
sampling.count <- sapply(unique(sample.count), function(x) length(which(sample.count == x)))
data4 <- data3[(sample.count %in% which(sampling.count > 1)),]
log.removal <- sapply(unique(data4[,"sample.count"]), function(x) {
log(data4[first(which(data4[,"sample.count"] == x)),3]/data4[last(which(data4[,"sample.count"] == x)),3])
})
final.ecoli <- sapply(unique(data4[,"sample.count"]), function(x) {
data4[last(which(data4[,"sample.count"] == x)),3]
})
plot(final.ecoli ~ data.to.plot[,"CT"])
plot(final.ecoli ~ data.to.plot[,"CT"], pch=20)
plot(final.ecoli ~ data.to.plot[,"CT"], pch=20, xlab="CT")
plot(final.ecoli ~ data.to.plot[,"CT"], pch=20, xlab="CT", main="Final Ecoli vs PAA CT")
plot(final.ecoli ~ data.to.plot[,"CT"], pch=20, xlab="CT", ylab=" Final E.coli",main="Final Ecoli vs PAA CT")
plot(final.ecoli ~ data.to.plot[,"CT"], pch=20, xlab="CT", ylab=" Final E.coli", main="Final Ecoli vs PAA CT")
plot(log(final.ecoli) ~ data.to.plot[,"CT"], pch=20, xlab="CT", ylab=" Final E.coli", main="Final Ecoli vs PAA CT")
data.lm <- lm(log(final.ecoli) ~ data.to.plot[,"CT"])
line(data.lm)
abline(data.lm)
summary(data.lm)
install.packages("mgcv")
library(mgcv)
gam(log(final.ecoli) ~ data.to.plot[,"CT"] + data.to.plot[,"Chemscan"])
plot(gam(log(final.ecoli) ~ data.to.plot[,"CT"] + data.to.plot[,"Chemscan"]))
mgcv::gam(log(final.ecoli) ~ data.to.plot[,"CT"] + data.to.plot[,"Chemscan"])
data.gam <- gam(log(final.ecoli) ~ data.to.plot[,"CT"] + data.to.plot[,"Chemscan"])
data.gam
plot(data.gam)
?plot.gam
plot(data.gam, all.terms = FALSE)
summary(data.gam)
plot(lm(log(final.ecoli) ~ data.to.plot[,"CT"] + data.to.plot[,"Chemscan"]))
###### Compile PAA #####
{
library(xts)
library(xlsx)
# Load raw data
PAA.PROFILE.DATA <- read.xlsx("data/PAA PROFILE DATA_08-08-19.xlsx", sheetIndex = 1)
##### PAA #####
# Subset PAA data
PAA.PROFILE.DATA <- PAA.PROFILE.DATA[which(PAA.PROFILE.DATA$ANALYSIS_CODE == "PAAR"),]
# Remove erroneous data
PAA.PROFILE.DATA <- PAA.PROFILE.DATA[which(PAA.PROFILE.DATA$COMBINATION_RESULT != "Scratched"),]
PAA.PROFILE.DATA <- PAA.PROFILE.DATA[which(!is.na(PAA.PROFILE.DATA$NUMERIC_RESULT)),]
# Fix timestamps
date.time <- strptime(paste(as.character(PAA.PROFILE.DATA$COLLECTION_DATE), as.character(PAA.PROFILE.DATA$COLLECTION_TIME)), format="%Y-%m-%d %H:%M")
# Clean data objects
data <- data.frame(date.time, stringsAsFactors = FALSE)
data <- cbind(data, as.data.frame(PAA.PROFILE.DATA$COMMON_NAME, stringsAsFactors = FALSE))
data <- cbind(data, as.data.frame(as.numeric(as.character(PAA.PROFILE.DATA$NUMERIC_RESULT)),
stringsAsFactors = FALSE))
colnames(data) <- c("date.time", "COMMON_NAME", "NUMERIC_RESULT")
data <- data[order(data[,1]),]
# Load Flow and setpoint Data
{
# Instasll and load piwebapi package from Github
# install.packages("devtools")
# library(devtools)
# install_github("rbechalany/PI-Web-API-Client-R")
library(piwebapi)
# Login information
useKerberos <- TRUE
username <- "knewhart"
password <- "Lunabear2@"
validateSSL <- TRUE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
pi.times <- matrix(NA,nrow=length(date.time),ncol=1)
for(i in 1:length(date.time)) {
time.obj <- date.time[i]
time.obj$hour <- time.obj$hour + 6
pi.times[i,1] <- paste0(as.character(format(time.obj,"%Y-%m-%d")),"T",
as.character(format(time.obj,"%H:%M:%S")),"Z")
}
pi.tags <- matrix(c("DIS North Flow", "\\\\applepi\\PAA_North_Plant_Flow",
"PAA Setpoint", "\\\\applepi\\PAA_N_Target_Dose",
"DIS PAA N Upstream Residual", "\\\\applepi\\AI_K826"), ncol=2, byrow=TRUE)
for(tag in 1:nrow(pi.tags)) {
pi.points <- piWebApiService$point$getByPath(path=as.character(pi.tags[tag,2]))
data.holder <- piWebApiService$data$stream$getInterpolatedAtTimes(webId = pi.points$WebId,
time = c(pi.times[,1]))[[2]]
data.holder <- do.call("rbind", lapply(data.holder, function(x) c(x$Timestamp, x$Value)))
colnames(data.holder) <- c("Datetime", make.names(pi.tags[tag,1]))
if(tag==1) all.data <- data.holder
if(tag>1) {
all.data <- cbind(all.data, data.holder[,2])
colnames(all.data)[ncol(all.data)] <- make.names(pi.tags[tag,1])
}
}
}
# Merge PI data and PAA data
data2 <- cbind(data, as.data.frame(all.data[,2:ncol(all.data)], stringsAsFactors = FALSE))
# Calculate hrt
hrt <- matrix(data=NA, nrow=nrow(data2), ncol = 1)
hrt[grep("NPAA1M", data2$COMMON_NAME)] <- 122.2683*as.numeric(as.vector(data2[c(grep("NPAA1M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.9312)
hrt[grep("NPAA10M", data2$COMMON_NAME)] <- 1044.6*as.numeric(as.vector(data2[c(grep("NPAA10M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.956)
hrt[grep("NPAA20M", data2$COMMON_NAME)] <- 1909.8*as.numeric(as.vector(data2[c(grep("NPAA20M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.958)
hrt[grep("NPAA30M", data2$COMMON_NAME)] <- 2775*as.numeric(as.vector(data2[c(grep("NPAA30M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.959)
data3 <- cbind(data2, as.data.frame(hrt, stringsAsFactors = FALSE))
colnames(data3)[ncol(data3)] <- "HRT (min)"
data3 <- na.omit(data3)
# Label sampling campaigns
sample.count <- vector()
for(i in 2:nrow(data3)){
if(i == 2) {
last.row <- 1
sampling.campaign <- 1
}
if(difftime(data3[,"date.time"][i],data3[,"date.time"][i-1], units = "mins") > 60) {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
} else {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:(i-1)))))
last.row <- i
sampling.campaign <- sampling.campaign + 1
}
} else {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
}
}
}
data4 <- cbind(data3, as.data.frame(sample.count, stringsAsFactors=FALSE))
data.to.save <- data4
colnames(data.to.save) <- c("Datetime", "Sample Location", "PAA (mg/L)", "Flow (MGD)",
"PAA Setpoint (mg/L)", "Chemscan PAA (mg/L)", "HRT (min)", "Sampling event")
# write.csv(data.to.save, file="data/PAA PROFILE DATA_08-08-19_PAA.csv", row.names = FALSE)
}
{
data <- data.to.save
exp.mod.vals <- matrix(data=NA, nrow=nrow(data), ncol=2)
mod.results <- matrix(data=NA, nrow=length(unique(data[,"Sampling event"])), ncol=4)
# Fit curve
for(i in unique(data[,"Sampling event"])) {
s <- which(data[,"Sampling event"] %in% i)
yy <- log(as.numeric(as.vector(data[s,"PAA (mg/L)"])))
xx <- as.numeric(as.vector(data[s,"HRT (min)"]))
if(any(is.infinite(yy))) {
xx <- xx[!is.infinite(yy)]
yy <- yy[!is.infinite(yy)]
}
mod <- lm(yy~xx)
yy.predict <- predict(mod)
k <- as.numeric(coef(mod)[2]*-1)
C0 <- exp(as.numeric(coef(mod)[1]))
D <- as.numeric(as.vector(data[s,"PAA Setpoint (mg/L)"])) - C0
exp.mod.vals[s,1] <- D
exp.mod.vals[s,2] <- k
mod.results[i,1] <- D[1]
mod.results[i,2] <- k[1]
mod.results[i,3] <- as.POSIXct(data[s,"Datetime"])[1]
mod.results[i,4] <- C0/k-C0/k*exp(-k*last(xx)) # CT
}
CT <- mod.results[,4]
}
CT
plot(CT)
plot(D)
plot(mod.results[,1])
which(D < 0)
which(mod.results[,1] < 0)
###### Compile other components #####
{
##### E.coli #####
PAA.PROFILE.DATA <- read.xlsx("data/PAA PROFILE DATA_08-08-19.xlsx", sheetIndex = 1)
# Subset PAA data
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA[which(PAA.PROFILE.DATA$ANALYSIS_CODE == "ECIDX"),]
# Remove erroneous data
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(PAA.PROFILE.DATA.ecoli$COMBINATION_RESULT != "Scratched"),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(PAA.PROFILE.DATA.ecoli$COMBINATION_RESULT != "PENDING"),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[which(!is.na(PAA.PROFILE.DATA.ecoli$NUMERIC_RESULT)),]
PAA.PROFILE.DATA.ecoli <- PAA.PROFILE.DATA.ecoli[-which(substr(PAA.PROFILE.DATA.ecoli$LOCATION_DESCRIPTION,1,9) == "RWH South"),]
# Fix timestamps
date.time <- strptime(paste(as.character(PAA.PROFILE.DATA.ecoli$COLLECTION_DATE), as.character(PAA.PROFILE.DATA.ecoli$COLLECTION_TIME)), format="%Y-%m-%d %H:%M")
# Clean data objects
data <- data.frame(date.time, stringsAsFactors = FALSE)
data <- cbind(data, as.data.frame(PAA.PROFILE.DATA.ecoli$COMMON_NAME, stringsAsFactors = FALSE))
data <- cbind(data, as.data.frame(as.numeric(as.character(PAA.PROFILE.DATA.ecoli$NUMERIC_RESULT)),
stringsAsFactors = FALSE))
colnames(data) <- c("date.time", "COMMON_NAME", "NUMERIC_RESULT")
data <- data[order(data[,1]),]
# Load Flow and setpoint Data
{
# Install and load piwebapi package from Github
# install.packages("devtools")
# library(devtools)
# install_github("rbechalany/PI-Web-API-Client-R")
library(piwebapi)
# Login information
useKerberos <- TRUE
username <- "knewhart"
password <- "Lunabear2@"
validateSSL <- TRUE
debug <- TRUE
piWebApiService <- piwebapi$new("https://pivision/piwebapi", useKerberos, username, password, validateSSL, debug)
pi.times <- matrix(NA,nrow=length(date.time),ncol=1)
for(i in 1:length(date.time)) {
time.obj <- date.time[i]
time.obj$hour <- time.obj$hour + 6
pi.times[i,1] <- paste0(as.character(format(time.obj,"%Y-%m-%d")),"T",
as.character(format(time.obj,"%H:%M:%S")),"Z")
}
pi.tags <- matrix(c("DIS North Flow", "\\\\applepi\\PAA_North_Plant_Flow",
"PAA Setpoint", "\\\\applepi\\PAA_N_Target_Dose",
"DIS PAA N Upstream Residual", "\\\\applepi\\AI_K826"), ncol=2, byrow=TRUE)
for(tag in 1:nrow(pi.tags)) {
pi.points <- piWebApiService$point$getByPath(path=as.character(pi.tags[tag,2]))
data.holder <- piWebApiService$data$stream$getInterpolatedAtTimes(webId = pi.points$WebId,
time = c(pi.times[,1]))[[2]]
data.holder <- do.call("rbind", lapply(data.holder, function(x) c(x$Timestamp, x$Value)))
colnames(data.holder) <- c("Datetime", make.names(pi.tags[tag,1]))
if(tag==1) all.data <- data.holder
if(tag>1) {
all.data <- cbind(all.data, data.holder[,2])
colnames(all.data)[ncol(all.data)] <- make.names(pi.tags[tag,1])
}
}
}
# Merge PI data and PAA data
data2 <- cbind(data, as.data.frame(all.data[,2:ncol(all.data)], stringsAsFactors = FALSE))
# Calculate hrt
hrt <- matrix(data=NA, nrow=nrow(data2), ncol = 1)
hrt[grep("NPAA1M", data2$COMMON_NAME)] <- 122.2683*as.numeric(as.vector(data2[c(grep("NPAA1M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.9312)
hrt[grep("NPAA10M", data2$COMMON_NAME)] <- 1044.6*as.numeric(as.vector(data2[c(grep("NPAA10M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.956)
hrt[grep("NPAA20M", data2$COMMON_NAME)] <- 1909.8*as.numeric(as.vector(data2[c(grep("NPAA20M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.958)
hrt[grep("NPAA30M", data2$COMMON_NAME)] <- 2775*as.numeric(as.vector(data2[c(grep("NPAA30M", data2$COMMON_NAME)),"DIS.North.Flow"]))^(-0.959)
data3 <- cbind(data2, as.data.frame(hrt, stringsAsFactors = FALSE))
colnames(data3)[ncol(data3)] <- "HRT (min)"
# Label sampling campaigns
sample.count <- vector()
for(i in 2:nrow(data3)){
if(i == 2) {
last.row <- 1
sampling.campaign <- 1
}
if(difftime(data3[,"date.time"][i],data3[,"date.time"][i-1], units = "mins") > 60) {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
} else {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:(i-1)))))
last.row <- i
sampling.campaign <- sampling.campaign + 1
}
} else {
if(i == nrow(data3)) {
sample.count <- c(sample.count, rep(sampling.campaign, length(c(last.row:i))))
}
}
}
data3 <- cbind(data3, as.data.frame(sample.count, stringsAsFactors = FALSE))
sampling.count <- sapply(unique(sample.count), function(x) length(which(sample.count == x)))
data4 <- data3[(sample.count %in% which(sampling.count > 1)),]
log.removal <- sapply(unique(data4[,"sample.count"]), function(x) {
log(data4[first(which(data4[,"sample.count"] == x)),3]/data4[last(which(data4[,"sample.count"] == x)),3])
})
final.ecoli <- sapply(unique(data4[,"sample.count"]), function(x) {
data4[last(which(data4[,"sample.count"] == x)),3]
})
}
final.ecoli
log.removal
View(data)
log10(data[1,3]/data[4,3])
log10(data[8,3]/data[7,3])
View(data3)
log.removal <- sapply(unique(data4[,"sample.count"]), function(x) {
log10(data4[first(which(data4[,"sample.count"] == x)),3]/data4[last(which(data4[,"sample.count"] == x)),3])
})
log.removal
nrow(data3)
nrow(data4)
plot(log.removal)
chemscan <- as.numeric(sapply(unique(data.to.save[,8]), function(x) data.to.save[first(which(data.to.save[,8]==x)),6]))
data.to.plot <- data.frame("CT"=CT, "log.removal"=log.removal, "Chemscan"=chemscan)
colnames(data.to.plot) <- c("CT", "log.removal", "chemscan")
scatterplot3d(data.to.plot[,1], data.to.plot[,2], data.to.plot[,3], highlight.3d = TRUE,  angle = 30,col.axis = "blue", col.grid = "lightblue", cex.axis = 1.3,cex.lab = 1.1, main = "Hemisphere", pch = 20)
data.to.analyze <- scale(data.to.plot)
data.pca <- princomp(data.to.analyze)
summary(data.pca)
plot(data.pca)
data.f1 <- factanal(data.to.analyze, factors=1, rotation="varimax")
plot(log.removal ~ CT, data=data.to.plot)
plot(log(final.ecoli) ~ data.to.plot[,"CT"], pch=20, xlab="CT", ylab=" Final E.coli", main="Final Ecoli vs PAA CT")
data.lm <- lm(log(final.ecoli) ~ data.to.plot[,"CT"])
